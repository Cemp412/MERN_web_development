# ************************* Node Js notes **************************************/

# ************************* Backend 1 (Node.js) *******************************/

1. Qs. What is node.js?
ans. 1. It is a javascript runtime environment. It is used for server side programming.
    2. It is not a language, library or framework.


2. Node Repl: (REPL stands for Read Evaluate Print Loop)
    1. To enter into node REPL simply write node into cmd then you can run javascript there.
    2. simply write .global into cmd 
    3. simply write .help to run help command.
    4. simply write .exit command to exit from node REPL.

3. Process: This process provide information about, and control over, the current Node.js process.


4. process.argv : return an array containing the command-line arguments passed when the Node.js process was launched. Run this  in browser.
5. process.release: Run all of these in node REPL
6. process.cwd(): current working directory. Run all of these in node REPL.

7. Module.exports : requiring files.
    1. require() : a built-in function to include external modules that exist in seperate files.
    2. module.exports : a special object.


# *************************  Backend 2 (Node: Express) ******************************************/

1. Library v/s Framework: 

    Library : A library is a collection of pre written code that can be used to perform specific tasks.
    eg: axios.

    Framework: A framework is a set of pre-written code that provides a structure for developing software applications.
    ex: express.

2. Express: A node.js is web application framework that helps us to make web applications. It is used for server side programming.
    uses of express: 1. listen to all incoming web requests.
                     2. parse the data in request.
                     3. to match response with routes.

3. Getting started with Express: 
        const express = require("express");
        const app = express();

        let port = 8080;
        app.listen(port, () => {
            console.log(`app listening on port ${port}`);
        });

    *Ports are the logical endpoints of network connection that is used to exchange information between a web server and web client.

4. Handling requests: 
    1. app.use(): app.use((req, response) => {
        console.log("new incoming request");
    });

5. Routing: It is process of selecting a path for traffic in a network or between or across multiple networks.

    //GET Request
    app.get("/apple", (req, resp) => {
        resp.send({
            name: "apple",
            color: "red"
        });
    });

    
    //POST Request
    app.post("/", (req, res) => {
        res.send("You sent a post request to root.");
    })

6. Nodemon: It is a package to automatically restart server with code changes.

7. Path Parameters: (req.params)
    app.get("/ig/:username", (req, res) => {
        let { username } = req.params;
        res.send(`This account belongs to @{$username});
    })

    ex: /Query Strings
        app.get("/search", (req, res) => {
            // console.log(req.query);
            let {q} = req.query;
            if(!q) {
                res.send("Nothing searched");
            }
            res.send(`Search results for query: ${q}`)
        })


# *********************** Node JS Part 3 (Node: EJS) *********************************/

1. Templating : EJS(Embedded Javascript Templates) 
    EJS is a simple templating language that lets you generate HTML markup with plain javascript.
    Packages: handlebar, EJS.

2. Views Directory: 
    const path = require("path");
    app.set("views", path.join(__dirname, "/views"));

3. Interpolation Syntax: Interpolation refers to embedding expressions into marked up text.

4. Passing data to EJS: app.get("/rolldice", (req, res) => {
    let num = Math.floor(Math.random() * 6) + 1;
    res.render("rollDice.ejs", {diceVal: num});
})
<h1>Your dice gave value: <%= diceVal %></h1>

5. Instagram EJS: Create a basic Template for instagram page based on the following route: 
    app.get("/ig/:username", (req, res) => {
        let { username } = req.params;
        // console.log(username)
        res.render("instagram.ejs", { username })
    })

6. Conditional Statements in EJS: Adding condition inside EJS
    <%= if(diceVal == 6) { %>
        <h2>Nice! Roll dice again. </h2>;
    <%= } %>

7. Loops: <ul>
            <% for(let name of followers) { %>
                <li><%= name %></li>
            <% } %>
        </ul>

8. Instagram page with ejs (task)
9. Serving Static files:  ex: app.use(express.static(folder_name)), ex: app.use(express.static(path.join(__dirname, "public")));

10. Includes: <%- include("includes/head.ejs"); %> 



# **************************  Miscellaneous **********************************/

1. GET & POST Requests:
    1). GET : i). Used to GET some response.
              ii). Data sent in query strings. (limited, string data & visible in URL).

    2). POST: i).Used to POST something (for Create/Write/Update).
              ii). Data sent via request body (any type of data).

2. Handling Post Requests: 
    i). Set up POST request route to get some response.
    ii). Parse POST request data.
    app.use(express.urlencoded({ extended:true }));
    app.use(express.json());

3. Revisiting JS (OOPS) : 
    1. Object Prototypes: Prototypes are the mechanism by which javascript object inherits features from mone another.It is like a single template object that all objects inherit methods and properties from without having their own company.
    let arr = [6, 7, 9, 0];
     ex: arr.__proto__ (reference)
     Array.prototype (actual object)
     String.prototype

    note: 1. let's consider an example to change value of (arr.__proto__.push = (n) => { console.log("pushing number : ", n); } then try arr.push(3); //It will change definition of array.push for this particular example.
    2. "abc".toUpperCase === "xyz".toUpperCase // It returns true as they refer to the same thing.
    3. arr1.sayHello === arr2.sayHello //It returns false because they were two different methods in two differ arrays.

    Qs. What are prototypes?
    ans. Every object in Javascript has a built-in property, which is called prototype. The prototype is itself an object, so the prototype will have its own prototype, making what's called a prototype chain. The chain ends when we reach a prototype that has null for its own prototype.

4. Factory functions: A function that creates objects.
5. New Operator: The new operator let developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function. //Refer mdn sheet for New Operator
ex: function Person(name, age) {
        this.name = name;
        this.age = age;
    }

    Person.prototype.talk = function () {
        console.log(`Hi, my name is ${this.name}`);
    }

    let p1 = new Person("adma", 25);
    let p2 = new Person("eve", 25);

6. Classes: Classes are a template for creating objects. The constructor method is a special method of a class for creating and initializing an object an object instance of that class.
ex: class Person{
    constructor(name, age) {
        this.name = name;
        this.age = age; 
    }

    talk() {
        console.log(`Hi, my name is ${this.name}`);
    }
}
let p1 = new Person("adam", 25);

7. Inheritance: Inheritance is mechanism that allows us to create new classes on the basis of already existing classes.
ex: class Student extends Person{
        constructor(name, age, marks){
            super(name, age) {
                this.marks = marks;
            }
        }

        greet() {
            return "hello";
        }
    }

    let s1 = new Student("adam", 100);
8. Prepare notes from OOPs summary sheet.


#*************************************** Backend 4 (REST) ****************************************/

1. Representational State Transfer (REST): REST is an architectural style that defines a set of constraints to be used for creating web services.
//Twitter API refernce: developer.twitter.com

2. CRUD Operations: i. GET retrieves resources.
                    ii. POST submit new data to the server.
                    iii. PUT updates existing data.
                    iv. PATCH update existing data partially.
                    v. DELETE removes data.

3. Creating RESTful APIs: 
    1. GET  /posts to get data for all posts. (Index route)
    2. POST /posts  to add a new post. (CREATE route)
    3. GET  /posts/:id to get one post (using id). (VIEW route)
    4. PATCH/PUT /posts/:id to update specific post. (Update route)
    5. GET  /posts/:id/edit Serve the edit form. (Edit route)
    6. DELETE /posts/:id to delete a specific post. (Destroy route)

4. i). Index Route:  ii).Post Route  iii). Show Route iv). Update Route v). Edit Route Vi). Destroy Route

//Note: Refer devdocs.io to check documentation of any framework (angular, express, node etc.)

5. Redirect url: 
6. Creating UUID Package: UUID(Universally unique Identifier).
    command: npm install uuid (use npmjs.com)

* Hw problem: Prepare same page for instagram, twitter any of the one.
